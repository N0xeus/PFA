#ifndef TOUCHABLEOBJECT_H
#define TOUCHABLEOBJECT_H

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <SFML/Graphics/Rect.hpp>
#include <iostream>
#include "Point.h"

////////////////////////////////////////////////////////////
/// \brief Object with a hitbox which can be touched by \link Attack
///
////////////////////////////////////////////////////////////
class TouchableObject
{
    public:

        TouchableObject();
        ////////////////////////////////////////////////////////////
        /// \brief Constructor
        ///
        /// \param id Identifier
        /// \param box Physical rectangle representation
        ///
        /// Create an object with a identifier and a rectangular hitbox
        ///
        ///
        ////////////////////////////////////////////////////////////

        TouchableObject(int id, const sf::FloatRect box);

        ////////////////////////////////////////////////////////////
        /// \brief Destructor
        ///
        ////////////////////////////////////////////////////////////
        virtual ~TouchableObject();

        ////////////////////////////////////////////////////////////
        /// \brief Getter of identifier
        ///
        /// \return Identifier
        ////////////////////////////////////////////////////////////
        int getId() { return id; }

        ////////////////////////////////////////////////////////////
        /// \brief Getter of hitbox
        ///
        /// \return Hitbox
        ////////////////////////////////////////////////////////////
        sf::FloatRect getHitbox() { return hitbox; }

        ////////////////////////////////////////////////////////////
        /// \brief Setter of the top component of hitbox
        ///
        /// \param t New value
        ///
        ////////////////////////////////////////////////////////////
        void setHitboxTop(int t) {  hitbox.top = t; }

        ////////////////////////////////////////////////////////////
        /// \brief Setter of the left component of hitbox
        ///
        /// \param l New value
        ///
        ////////////////////////////////////////////////////////////
        void setHitboxLeft(int l) { hitbox.left = l; }

        ////////////////////////////////////////////////////////////
        /// \brief Getter of position
        ///
        /// \return position
        ////////////////////////////////////////////////////////////
        Point getPos() { return pos; }

        ////////////////////////////////////////////////////////////
        /// \brief Getter of position on the x axis
        ///
        /// \return position on the x axis
        ////////////////////////////////////////////////////////////
        int getPosX() { return pos.Getx(); }

        ////////////////////////////////////////////////////////////
        /// \brief Getter of position on the y axis
        ///
        /// \return position on the y axis
        ////////////////////////////////////////////////////////////
        int getPosY() { return pos.Gety(); }

        ////////////////////////////////////////////////////////////
        /// \brief Setter of the position
        ///
        /// \param p New value
        ///
        ////////////////////////////////////////////////////////////
        void setPos(Point p) { pos = p; }

        ////////////////////////////////////////////////////////////
        /// \brief Setter of the position on the x axis
        ///
        /// \param x New value
        ///
        ////////////////////////////////////////////////////////////
        void setPosX(int x) { pos.Setx(x); }

        ////////////////////////////////////////////////////////////
        /// \brief Setter of the position on the y axis
        ///
        /// \param y New value
        ///
        ////////////////////////////////////////////////////////////
        void setPosY(int y) { pos.Sety(y); }

        ////////////////////////////////////////////////////////////
        /// \brief Determine the collision
        ///
        /// \param to Other TouchableObject which can be in collision
        ///
        /// Return true if the two objects are in collision
        ///
        ////////////////////////////////////////////////////////////
        bool intersects(TouchableObject& to);

        ////////////////////////////////////////////////////////////
        /// \brief Determine the type of the object
        ///
        /// Return true if the object is an \link Attack
        ///
        ////////////////////////////////////////////////////////////
        virtual bool isAttack()=0;

        ////////////////////////////////////////////////////////////
        /// \brief Determine the type of the object
        ///
        /// Return true if the object is an \link Character
        ///
        ////////////////////////////////////////////////////////////
        virtual bool isCharacter()=0;

        ////////////////////////////////////////////////////////////
        /// \brief Determine the type of the object
        ///
        /// Return true if the object is an \link Obstacle
        ///
        ////////////////////////////////////////////////////////////
        virtual bool isObstacle()=0;

        ////////////////////////////////////////////////////////////
        /// \brief Determine the type of the object
        ///
        /// Return true if the object is an \link Pickable
        ///
        ////////////////////////////////////////////////////////////
        virtual bool isPickable()=0;

    protected:
        ////////////////////////////////////////////////////////////
        // Member data
        ////////////////////////////////////////////////////////////
        int id;                     /// Identifier
        sf::FloatRect hitbox;       /// Rectangular hitbox
        Point pos;                  /// Center position of the hitbox

    private:

};

#endif // TOUCHABLEOBJECT_H
