#ifndef ATTACK_H
#define ATTACK_H

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <TouchableObject.h>
#include <SFML/System/Time.hpp>

////////////////////////////////////////////////////////////
/// \brief Attack associated with a \link Character
///
////////////////////////////////////////////////////////////
class Attack : public TouchableObject
{
    public:
        ////////////////////////////////////////////////////////////
        /// \brief Constructor
        ///
        /// \param damage Attack damage
        /// \param atqSpeed Attack speed
        ///
        /// Create a \link TouchableObject with damage and attack speed
        ///
        ////////////////////////////////////////////////////////////
        Attack(int id, const sf::FloatRect box, int damage, float atqSpeed);

        ////////////////////////////////////////////////////////////
        /// \brief Destructor
        ///
        ////////////////////////////////////////////////////////////
        virtual ~Attack();

        ////////////////////////////////////////////////////////////
        /// \brief Getter of Attack damage
        ///
        /// \return Damage
        ///
        ////////////////////////////////////////////////////////////
        int getPower(){ return power; }

        ////////////////////////////////////////////////////////////
        /// \brief Setter of Attack damage
        ///
        /// \param p New Attack power
        ///
        ////////////////////////////////////////////////////////////
        void setPower(int p){ power=p; }

        ////////////////////////////////////////////////////////////
        /// \brief Getter of Attack speed
        ///
        /// \return Speed
        ///
        ////////////////////////////////////////////////////////////
        sf::Time getSpeed(){ return speed; }

        ////////////////////////////////////////////////////////////
        /// \brief Setter of Attack speed
        ///
        /// \param s New Attack speed
        ///
        ////////////////////////////////////////////////////////////
        void setSpeed(sf::Time s){ speed=s; }

        ////////////////////////////////////////////////////////////
        /// \brief Determine the type of the object
        ///
        /// Return true if the object is an \link Attack
        ///
        ////////////////////////////////////////////////////////////
        virtual bool isAttack(){ return true; }

        ////////////////////////////////////////////////////////////
        /// \brief Determine the type of the object
        ///
        /// Return true if the object is an \link Character
        ///
        ////////////////////////////////////////////////////////////
        virtual bool isCharacter(){ return false; }

        ////////////////////////////////////////////////////////////
        /// \brief Determine the type of the object
        ///
        /// Return true if the object is an \link Obstacle
        ///
        ////////////////////////////////////////////////////////////
        virtual bool isObstacle(){ return false; }

        ////////////////////////////////////////////////////////////
        /// \brief Determine the type of the object
        ///
        /// Return true if the object is an \link Pickable
        ///
        ////////////////////////////////////////////////////////////
        virtual bool isPickable(){ return false; }

        ////////////////////////////////////////////////////////////
        /// \brief Attack can be use or not
        ///
        /// \param t Hit time
        ///
        /// Return true if the attack is not too close of the previous one
        ///
        ////////////////////////////////////////////////////////////
        bool isReady(sf::Time t);

        ////////////////////////////////////////////////////////////
        /// \brief Determine the attack type
        ///
        /// Return true if the attack is a hand to hand attack
        ///
        ////////////////////////////////////////////////////////////
        virtual bool isHtH()=0;

        ////////////////////////////////////////////////////////////
        /// \brief Determine the attack type
        ///
        /// Return true if the attack is a distance attack
        ///
        ////////////////////////////////////////////////////////////
        virtual bool isProjectile()=0;

    protected:
        ////////////////////////////////////////////////////////////
        // Member data
        ////////////////////////////////////////////////////////////
        int power;              /// Attack damage
        sf::Time speed;         /// Attack speed
        sf::Time previousHit;   /// Time of the previous attack
        bool enable;            /// Permission

    private:
        ////////////////////////////////////////////////////////////
        /// \brief Setter of permission
        ///
        ////////////////////////////////////////////////////////////
        void setEnable(bool b) { enable=b; }
};

#endif // ATTACK_H
