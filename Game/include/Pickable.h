#ifndef PICKABLE_H
#define PICKABLE_H

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <TouchableObject.h>
#include <SFML/System/Time.hpp>

////////////////////////////////////////////////////////////
/// \brief Object which can be picked by a Character
///
////////////////////////////////////////////////////////////
class Pickable : public TouchableObject
{
    public:
        ////////////////////////////////////////////////////////////
        /// \brief Constructor
        ///
        /// Create a specific \link TouchableObject
        ///
        ////////////////////////////////////////////////////////////
        Pickable(int id, const sf::IntRect box);

        ////////////////////////////////////////////////////////////
        /// \brief Destructor
        ///
        ////////////////////////////////////////////////////////////
        virtual ~Pickable();

        ////////////////////////////////////////////////////////////
        /// \brief Getter of capacity to be picked
        ///
        /// Return true if the Pickable is really pickable
        ///
        ////////////////////////////////////////////////////////////
        bool isEnable() { return enable; }

        ////////////////////////////////////////////////////////////
        /// \brief Setter of capacity to be picked
        ///
        /// \param b New value
        ///
        ////////////////////////////////////////////////////////////
        void setEnable(bool b) { enable=b; }

        ////////////////////////////////////////////////////////////
        /// \brief Determine the type of the object
        ///
        /// Return true if the object is an \link Attack
        ///
        ////////////////////////////////////////////////////////////
        bool isAttack(){ return false; }

        ////////////////////////////////////////////////////////////
        /// \brief Determine the type of the object
        ///
        /// Return true if the object is an \link Character
        ///
        ////////////////////////////////////////////////////////////
        bool isCharacter(){ return false; }

        ////////////////////////////////////////////////////////////
        /// \brief Determine the type of the object
        ///
        /// Return true if the object is an \link Obstacle
        ///
        ////////////////////////////////////////////////////////////
        bool isObstacle(){ return false; }

        ////////////////////////////////////////////////////////////
        /// \brief Determine the type of the object
        ///
        /// Return true if the object is an \link Pickable
        ///
        ////////////////////////////////////////////////////////////
        bool isPickable(){ return true; }

        ////////////////////////////////////////////////////////////
        /// \brief Determine the Pickable type
        ///
        /// Return true if the Pickable is a \link Bonus
        ///
        ////////////////////////////////////////////////////////////
        virtual bool isBonus()=0;

        ////////////////////////////////////////////////////////////
        /// \brief Determine the Pickable type
        ///
        /// Return true if the Pickable is a \link Life
        ///
        ////////////////////////////////////////////////////////////
        virtual bool isLife()=0;

    protected:
        ////////////////////////////////////////////////////////////
        // Member data
        ////////////////////////////////////////////////////////////
        bool enable;    ///Enable to be picked

    private:
};

#endif // PICKABLE_H
